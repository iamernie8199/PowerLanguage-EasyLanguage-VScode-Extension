{
  "scopeName": "source.powerlanguage",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#comments_block" },
        { "include": "#letter" },
        { "include": "#var" },
        { "include": "#paren-expression" },
        { "include": "#function" },
        { "include": "#operators" },
        { "include": "#control" },
        { "name": "string.quoted.single", "begin": "'", "end": "'" },
        { "name": "string.quoted.double", "begin": "\"", "end": "\"" },
        {
          "name": "constant.character.entity.numeric.decimal",
          "match": "[0-9]+"
        },
        {
          "name": "comment.block",
          "begin": "{",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin" }
          },
          "end": "}",
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end" }
          }
        },
        {
          "name": "comment.line.double-slash",
          "begin": "//",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment" }
          },
          "end": "\n"
        }
      ]
    },
    "control": {
      "match": "(?i)(((if|else|while|for|then|to|begin|)\\s)|\\bend(?=;|\\s))",
      "name": "keyword.control.untitled"
    },
    "function": {
      "patterns": [
        {
          "match": "(?i)((?<=\\s|=|\\()iff|summation|XAverage|WAverage|SquareRoot|typicalprice|ceiling|floor)",
          "name": "constant.character.entity.name.function"
        }
      ]
    },
    "letter": {
      "match": "(?i)(marketposition|var(?:s|iable(?:s|)|)|array|false|true|data[0-9]|input(?:s|)|ticks|(?<=\\W)(o(pen)?|h(igh)?|l(ow)?|c(lose)?|t(ime)?|v(olume)?|d(ay)?)(?=\\W))",
      "name": "constant.character"
    },
    "var": {
      "match": "(?i)value[0-9]|(?i)plot[0-9]|(?i)condition[0-9]",
      "name": "keyword.var"
    },
    "operators": {
      "match": "(?i)\\s(or|and)",
      "name": "keyword.op"
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "expression.group",
      "patterns": [{ "include": "#expression" }]
    }
  }
}
